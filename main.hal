# This file was created with the Mesa Configuration Tool on Sep 13 2024 06:29:09
# If you make changes to this file DO NOT run the configuration tool again!
# This file will be replaced with a new file if you do!

# kinematics
loadrt [KINS](KINEMATICS)

# motion controller
# TL (9/20/2024): Seems default num_spindles = 1
loadrt [EMCMOT](EMCMOT) servo_period_nsec=[EMCMOT](SERVO_PERIOD) num_joints=[KINS](JOINTS)

# hostmot2 driver
loadrt hostmot2
# TL (9/16/2024): Not using the sserial port right now, so let's not load it by passing 'xxxxxxx0'
#loadrt [HM2](DRIVER) board_ip=[HM2](ADDRESS) config="num_encoders=6 num_stepgens=6 sserial_port_0=00000000"
loadrt [HM2](DRIVER) board_ip=[HM2](ADDRESS) config="num_encoders=6 num_stepgens=6 num_pwmgens=1 sserial_port_0=xxxxxxx0"

setp hm2_[MESA](BOARD).0.watchdog.timeout_ns 5000000

loadrt pid names=pid.x,pid.z,pid.s

# PID Information for Stepper Boards
# Mesa hardware step generators at every servo thread invocation, the step
# generator hardware is given a new velocity. Without feedback from the PID
# controller the hardware position would slowly drift because of clock speed and
# timing differences between LinuxCNC and the step generator hardware.
# The PID controller gets feedback from the actual (fractional) step position and
# corrects for these small differences.

# THREADS
addf hm2_[MESA](BOARD).0.read servo-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf pid.x.do-pid-calcs servo-thread
addf pid.z.do-pid-calcs servo-thread
addf pid.s.do-pid-calcs servo-thread

addf hm2_[MESA](BOARD).0.write servo-thread

# DPLL TIMER
setp hm2_[MESA](BOARD).0.dpll.01.timer-us -50
setp hm2_[MESA](BOARD).0.stepgen.timer-number 1

# amp enable
net motion-enable <= motion.motion-enabled

# Board: 7i95

# Axis: X Joint: 0 Output: 0
# PID Setup
setp pid.x.Pgain [JOINT_0](P)
setp pid.x.Igain [JOINT_0](I)
setp pid.x.Dgain [JOINT_0](D)
setp pid.x.bias [JOINT_0](BIAS)
setp pid.x.FF0 [JOINT_0](FF0)
setp pid.x.FF1 [JOINT_0](FF1)
setp pid.x.FF2 [JOINT_0](FF2)
setp pid.x.deadband [JOINT_0](DEADBAND)
setp pid.x.maxoutput [JOINT_0](MAX_OUTPUT)
setp pid.x.error-previous-target True
# limit stepgen velocity corrections caused by position feedback jitter
setp pid.x.maxerror [JOINT_0](MAX_ERROR)

# joint-0 enable chain
net joint-[JOINT_NUM](X)-index-enable <=> pid.x.index-enable
net joint-[JOINT_NUM](X)-index-enable <=> joint.[JOINT_NUM](X).index-enable

net joint-[JOINT_NUM](X)-enable <= joint.[JOINT_NUM](X).amp-enable-out
net joint-[JOINT_NUM](X)-enable => pid.x.enable

net joint-[JOINT_NUM](X)-enable => hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).enable

# Joint 0 Step Generator Settings
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).dirsetup [JOINT_0](DIRSETUP)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).dirhold [JOINT_0](DIRHOLD)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).steplen [JOINT_0](STEPLEN)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).stepspace [JOINT_0](STEPSPACE)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).position-scale [JOINT_0](SCALE)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).maxvel [JOINT_0](STEPGEN_MAX_VEL)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).maxaccel [JOINT_0](STEPGEN_MAX_ACC)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).step_type 2 # quadrature
# TL (9/14/2014): One step in Mesa is one complete quadrature cycle. ClearPath servos counts 4 for each quadrature cycle (the rising and falling edges of A and B), so if the encoder resolution is 6,400 (for the enhanced version of the servos) set the step resolution in MSP to 4x6,400 = 24,800, so that every 4 counts (called 'quad count' in MSP) rotates the motor one encoder tick. Due to max rpm limit, if step/rev is set below 4x encoder resolution, just divide by 4 and you get the step/rev on the Mesa/LinuxCNC side.
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).control-type 1 # velocity mode


# position command and feedback
net joint-[JOINT_NUM](X)-pos-cmd <= joint.[JOINT_NUM](X).motor-pos-cmd
net joint-[JOINT_NUM](X)-pos-cmd => pid.x.command

net joint-[JOINT_NUM](X)-pos-fb <= hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).position-fb
net joint-[JOINT_NUM](X)-pos-fb => joint.[JOINT_NUM](X).motor-pos-fb
net joint-[JOINT_NUM](X)-pos-fb => pid.x.feedback

# PID Output
net joint.[JOINT_NUM](X).output <= pid.x.output
net joint.[JOINT_NUM](X).output => hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](X).velocity-cmd

# Axis: Z Joint: 1 Output: 1
# PID Setup
setp pid.z.Pgain [JOINT_1](P)
setp pid.z.Igain [JOINT_1](I)
setp pid.z.Dgain [JOINT_1](D)
setp pid.z.bias [JOINT_1](BIAS)
setp pid.z.FF0 [JOINT_1](FF0)
setp pid.z.FF1 [JOINT_1](FF1)
setp pid.z.FF2 [JOINT_1](FF2)
setp pid.z.deadband [JOINT_1](DEADBAND)
setp pid.z.maxoutput [JOINT_1](MAX_OUTPUT)
setp pid.z.error-previous-target True
# limit stepgen velocity corrections caused by position feedback jitter
setp pid.z.maxerror [JOINT_1](MAX_ERROR)

# joint-1 enable chain
net joint-[JOINT_NUM](Z)-index-enable <=> pid.z.index-enable
net joint-[JOINT_NUM](Z)-index-enable <=> joint.[JOINT_NUM](Z).index-enable

net joint-[JOINT_NUM](Z)-enable <= joint.[JOINT_NUM](Z).amp-enable-out
net joint-[JOINT_NUM](Z)-enable => pid.z.enable

net joint-[JOINT_NUM](Z)-enable => hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).enable

# Joint 1 Step Generator Settings
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).dirsetup [JOINT_1](DIRSETUP)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).dirhold [JOINT_1](DIRHOLD)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).steplen [JOINT_1](STEPLEN)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).stepspace [JOINT_1](STEPSPACE)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).position-scale [JOINT_1](SCALE)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).maxvel [JOINT_1](STEPGEN_MAX_VEL)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).maxaccel [JOINT_1](STEPGEN_MAX_ACC)
setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).step_type 2 # quadrature
# TL (9/14/2014): One step in Mesa is one complete quadrature cycle. ClearPath servos counts 4 for each quadrature cycle (the rising and falling edges of A and B), so if the encoder resolution is 6,400 (for the enhanced version of the servos) set the step resolution in MSP to 4x6,400 = 24,800, so that every 4 counts (called 'quad count' in MSP) rotates the motor one encoder tick. Due to max rpm limit, if step/rev is set below 4x encoder resolution, just divide by 4 and you get the step/rev on the Mesa/LinuxCNC side.

setp hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).control-type 1 # velocity mode

# position command and feedback
net joint-[JOINT_NUM](Z)-pos-cmd <= joint.[JOINT_NUM](Z).motor-pos-cmd
net joint-[JOINT_NUM](Z)-pos-cmd => pid.z.command

net joint-[JOINT_NUM](Z)-pos-fb <= hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).position-fb
net joint-[JOINT_NUM](Z)-pos-fb => joint.[JOINT_NUM](Z).motor-pos-fb
net joint-[JOINT_NUM](Z)-pos-fb => pid.z.feedback

# PID Output
net joint.[JOINT_NUM](Z).output <= pid.z.output
net joint.[JOINT_NUM](Z).output => hm2_[MESA](BOARD).0.stepgen.[STEPGEN_NUM](Z).velocity-cmd

# Spindle PID Setup
setp pid.s.Pgain [SPINDLE_0](P)
setp pid.s.Igain [SPINDLE_0](I)
setp pid.s.Dgain [SPINDLE_0](D)
setp pid.s.bias [SPINDLE_0](BIAS)
setp pid.s.FF0 [SPINDLE_0](FF0)
setp pid.s.FF1 [SPINDLE_0](FF1)
setp pid.s.FF2 [SPINDLE_0](FF2)
setp pid.s.deadband [SPINDLE_0](DEADBAND)
setp pid.s.maxoutput [SPINDLE_0](MAX_OUTPUT)
setp pid.s.error-previous-target true

# Spindle PWM Setup
setp hm2_[MESA](BOARD).0.pwmgen.00.output-type [SPINDLE_0](PWM_TYPE)
setp hm2_[MESA](BOARD).0.pwmgen.pwm_frequency [SPINDLE_0](PWM_FREQUENCY)
setp hm2_[MESA](BOARD).0.pwmgen.00.scale [SPINDLE_0](MAX_OUTPUT)

# Spindle Enable
net spindle-on <= spindle.0.on
net spindle-on => pid.s.enable
net spindle-on => hm2_[MESA](BOARD).0.pwmgen.00.enable

# Spindle Connections
net spindle-vel-cmd <= spindle.0.speed-out-abs
net spindle-vel-cmd => pid.s.command
# TL (9/20/2024): added this for debugging, basically takes pid out of the loop
net spindle-vel-cmd => hm2_[MESA](BOARD).0.pwmgen.00.value

net spindle-pid-out <= pid.s.output
#net spindle-pid-out => hm2_[MESA](BOARD).0.pwmgen.00.value

# Spindle Feedback
setp spindle.0.at-speed true

# Standard I/O Block - EStop, Etc
# create a signal for the estop loopback
net estop-loopback iocontrol.0.emc-enable-in <= iocontrol.0.user-enable-out

# This file was created with the Mesa Configuration Tool on Sep 13 2024 06:29:09
# If you make changes to this file DO NOT run the configuration tool again!
# This file will be replaced with a new file if you do!

# kinematics
loadrt [KINS](KINEMATICS)

# motion controller
loadrt [EMCMOT](EMCMOT) servo_period_nsec=[EMCMOT](SERVO_PERIOD) num_joints=[KINS](JOINTS)

# hostmot2 driver
loadrt hostmot2
loadrt [HM2](DRIVER) board_ip=[HM2](ADDRESS) config="num_encoders=6 num_stepgens=6 sserial_port_0=00000000"

setp hm2_[MESA](BOARD).0.watchdog.timeout_ns 5000000

loadrt pid names=pid.x,pid.z

# PID Information for Stepper Boards
# Mesa hardware step generators at every servo thread invocation, the step
# generator hardware is given a new velocity. Without feedback from the PID
# controller the hardware position would slowly drift because of clock speed and
# timing differences between LinuxCNC and the step generator hardware.
# The PID controller gets feedback from the actual (fractional) step position and
# corrects for these small differences.

# THREADS
addf hm2_[MESA](BOARD).0.read servo-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf pid.x.do-pid-calcs servo-thread
addf pid.z.do-pid-calcs servo-thread
addf hm2_[MESA](BOARD).0.write servo-thread

# DPLL TIMER
setp hm2_[MESA](BOARD).0.dpll.01.timer-us -50
setp hm2_[MESA](BOARD).0.stepgen.timer-number 1

# amp enable
net motion-enable <= motion.motion-enabled

# Board: 7i95

# Axis: X Joint: 0 Output: 0
# PID Setup
setp pid.x.Pgain [JOINT_X](P)
setp pid.x.Igain [JOINT_X](I)
setp pid.x.Dgain [JOINT_X](D)
setp pid.x.bias [JOINT_X](BIAS)
setp pid.x.FF0 [JOINT_X](FF0)
setp pid.x.FF1 [JOINT_X](FF1)
setp pid.x.FF2 [JOINT_X](FF2)
setp pid.x.deadband [JOINT_X](DEADBAND)
setp pid.x.maxoutput [JOINT_X](MAX_OUTPUT)
setp pid.x.error-previous-target True
# limit stepgen velocity corrections caused by position feedback jitter
setp pid.x.maxerror [JOINT_X](MAX_ERROR)

# joint-0 enable chain
net joint-0-index-enable <=> pid.x.index-enable
net joint-0-index-enable <=> joint.0.index-enable

net joint-0-enable <= joint.0.amp-enable-out
net joint-0-enable => pid.x.enable

net joint-0-enable => hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).enable

# Joint 0 Step Generator Settings
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).dirsetup [JOINT_X](DIRSETUP)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).dirhold [JOINT_X](DIRHOLD)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).steplen [JOINT_X](STEPLEN)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).stepspace [JOINT_X](STEPSPACE)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).position-scale [JOINT_X](SCALE)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).maxvel [JOINT_X](STEPGEN_MAX_VEL)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).maxaccel [JOINT_X](STEPGEN_MAX_ACC)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).step_type 2 # quadrature
# One step in Mesa is one complete quadrature cycle. ClearPath servos counts 4 for each quadrature 
# cycle (the rising and falling edges of A and B), so if the encoder resolution is 6,400 (for the 
# enhanced version of the servos) set the step resolution in MSP to 4x6,400 = 24,800, so that every
# 4 counts (called 'quad count' in MSP) rotates the motor one encoder tick. Adjust multiplier to
# account for max rpm limit.
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).control-type 1 # velocity mode


# position command and feedback
net joint-0-pos-cmd <= joint.0.motor-pos-cmd
net joint-0-pos-cmd => pid.x.command

net joint-0-pos-fb <= hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).position-fb
net joint-0-pos-fb => joint.0.motor-pos-fb
net joint-0-pos-fb => pid.x.feedback

# PID Output
net joint.0.output <= pid.x.output
net joint.0.output => hm2_[MESA](BOARD).0.stepgen.[JOINT_X](MESA_STEPGEN_NUM).velocity-cmd

# Axis: Z Joint: 1 Output: 1
# PID Setup
setp pid.z.Pgain [JOINT_Z](P)
setp pid.z.Igain [JOINT_Z](I)
setp pid.z.Dgain [JOINT_Z](D)
setp pid.z.bias [JOINT_Z](BIAS)
setp pid.z.FF0 [JOINT_Z](FF0)
setp pid.z.FF1 [JOINT_Z](FF1)
setp pid.z.FF2 [JOINT_Z](FF2)
setp pid.z.deadband [JOINT_Z](DEADBAND)
setp pid.z.maxoutput [JOINT_Z](MAX_OUTPUT)
setp pid.z.error-previous-target True
# limit stepgen velocity corrections caused by position feedback jitter
setp pid.z.maxerror [JOINT_Z](MAX_ERROR)

# joint-1 enable chain
net joint-1-index-enable <=> pid.z.index-enable
net joint-1-index-enable <=> joint.1.index-enable

net joint-1-enable <= joint.1.amp-enable-out
net joint-1-enable => pid.z.enable

net joint-1-enable => hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).enable

# Joint 1 Step Generator Settings
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).dirsetup [JOINT_Z](DIRSETUP)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).dirhold [JOINT_Z](DIRHOLD)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).steplen [JOINT_Z](STEPLEN)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).stepspace [JOINT_Z](STEPSPACE)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).position-scale [JOINT_Z](SCALE)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).maxvel [JOINT_Z](STEPGEN_MAX_VEL)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).maxaccel [JOINT_Z](STEPGEN_MAX_ACC)
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).step_type 2 # quadrature
# One step in Mesa is one complete quadrature cycle. ClearPath servos counts 4 for each quadrature 
# cycle (the rising and falling edges of A and B), so if the encoder resolution is 6,400 (for the 
# enhanced version of the servos) set the step resolution in MSP to 4x6,400 = 24,800, so that every
# 4 counts (called 'quad count' in MSP) rotates the motor one encoder tick. Adjust multiplier to
# account for max rpm limit.
setp hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).control-type 1 # velocity mode


# position command and feedback
net joint-1-pos-cmd <= joint.1.motor-pos-cmd
net joint-1-pos-cmd => pid.z.command

net joint-1-pos-fb <= hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).position-fb
net joint-1-pos-fb => joint.1.motor-pos-fb
net joint-1-pos-fb => pid.z.feedback

# PID Output
net joint.1.output <= pid.z.output
net joint.1.output => hm2_[MESA](BOARD).0.stepgen.[JOINT_Z](MESA_STEPGEN_NUM).velocity-cmd

# Standard I/O Block - EStop, Etc
# create a signal for the estop loopback
net estop-loopback iocontrol.0.emc-enable-in <= iocontrol.0.user-enable-out

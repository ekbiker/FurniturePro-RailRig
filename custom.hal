# Put HAL commands in this file that you want to run before the GUI loads

# Pause sequence
#   Stop G code execution immediates
#   Can resume program after last finished command
#   stop spindle
#   raise Z to max height
#   go back to home

# Unpause sequence
#   move Z above xy location of start of next program line
#   start spindle
#   wait for spindle to be at speed
#   move Z down to programmed location
#   resume program

#        halui.program.pause (bit in)
#              pin for pausing a program
#
#       halui.program.resume (bit in)
#              pin for resuming a program

# Software estop sequence - consider all possible scenarios
#   stop axis movements
#   activate z brake
#   stop spindle if spinning
#   stop any tool change in progress and reset to proper state
#   what to do during probing
#   how does the choosen gui connect to physical estop button
#   For more information on an external E-Stop see the estop_latch man page.
#   • halui.estop.activate (bit, in) - pin for requesting E-Stop
#   • halui.estop.is-activated (bit, out) - indicates E-stop reset
#   • halui.estop.reset (bit, in) - pin for requesting E-Stop reset
#   Go thru all servo and vfd manuals to look for specific estop instructions
#   GCode macros to deal with estop situations

# Physical estop sequence - if software or computer fails
#   physical button also connects to software estop
#   Use a Safety PLC or NC relay(s) as the estop mechanism, use flyback diodes for inductive loads
#   Independent system from linuxCNC software
#   wire NC circuits in series with the "normal" linuxCNC controlled switches/relays
#   button cuts servo enable signal
#   button cuts Z brake release signal
#   button stops spindle - trigger VFD STO (Safe Torque Off). See VFD manual
#   Safety PLC can allow for more complicated logic, simple relays will work for simple control

# Start sequence
#   Servo Enable, tie all enable to one output
#   VFD enable
#   Release Z brake, upon reception of HLFB
#   others...


# When LinuxCNC starts, 
# signal estop-loopback = false when estop condition exist, goes true when user releases estop in the UI
# halui.machine.is-on goes true when user presses Power-on in the UI
# NOTE: halui component is not dependent on the display UI. It's meant to connect hardware switches to LNC
#   and export information to other peripherals. Yeah, the naming is confusing in this time and age.
#   Consequently, it can be used before the gui.
#   man halui for more info...

# Name: enable_machine
# Type: signal
# Desc: used to set servos and VFD enable/disable status. 
# When both estop-loopback and enable_machine goes true, we want to enable the servos and VFD. This is because when physical estop is pressed, it will tell the UI to set estop and cut physical control signals. If UI is still active when physical estop is pressed, it will put machine into estop state and will require power on to turn on the machine.
net enable_machine <= halui.machine.is-on

# Note: SSR Output description
# From man page, SSR output: (bit in) out-NN. "The state of this SSR instance's NNth output. Set to 0 to make the output pins act like an open switch (no connection), set to 1 to make them act like a closed switch." Yes, the name is 'out', but the direction is 'in'. I'm so confused! This circuit is wired to +24vdc. All servo enables will be tied together.
net enable_machine => hm2_[MESA](BOARD).0.ssr.00.out-[SSR](ENABLE_MACHINE) # in

# Name: z_hlfb_servo_ready
# Type: signal
# Desc: When servos are enabled, their coils will energize. We wait for the HLFB from z servo to go true to signal "servo ready". Wire the z servo HLFB to receive "servo ready" so we can release (energize) the z brake. Here, HLFB is the output.
net z_hlfb_servo_ready => hm2_[MESA](BOARD).0.inmux.00.input-[INMUX](Z_SERVO_READY)
# Brake is wired to +24vdc and will draw 300 ma.  Mesa SSR can take 36V and 2A. Don't forget to protect the SSR with a flyback diode. Out-nn isn't a physical pin. The physical pins are out+ and out-.
net z_hlfb_servo_ready => hm2_[MESA](BOARD).0.ssr.00.out-[SSR](ENERGIZE_Z_BRAKE) # in

# Default config from MesaCT
## E-Stop Chain
#loadrt estop_latch count=1
#addf estop-latch.0 servo-thread
#
## E-Stop Loop
#net estop-loopin iocontrol.0.user-enable-out => estop-latch.0.ok-in
#net estop-loopout estop-latch.0.ok-out => iocontrol.0.emc-enable-in
#
## E-Stop Reset
#net estop-reset <= iocontrol.0.user-request-enable
#net estop-reset => estop-latch.0.reset
#net remote-estop0 estop-latch.0.fault-in <= hm2_[MESA](BOARD).0.inmux.00.input-00

# Spindle case pressure
#   We need case pressure of at least 30 psi when cutting fine wood material (MDF) or when mist or flood collant is on. We don't want the spindle to suck in stuff that will contaminate it. The case pressure is constantly on and the spindle will hiss.
#   Do we want separate logic, or do we want to look for mist/flood collant in G-code and turn on case pressure. Or just leave it on and get a big aux air tank. Or turn it on manually.

# CNCDepot Control box
# - It seems the solenoid inputs will take 5v. The pins (not labeled) goes to a pair of DIN rail relays which turn on/off 24vdc to the pneumatic valves. We can probably drive these pins with Mesa's SSR @ 5V. Additionaly, there is a connection wire from the base of the solenoids to DI7 input of the VFD (don't know what that does, will have to check the VFD menu to find what function it is set at). DI7 is one of the multi-fuction inputs.
# - there appears to be no separate case pressure regulation (min 30 psi), we can add a regulator to the case pressure output.
# - Output of VFD R1O/R1C (Relay 1 Normally Open/Relay Com) is connected to Pins 1 & 2 and labeled VFD fault. Don't hook anything up to this until we can verify what this signal is and what are the electrical characteristics. According to Avid docs, there is some special processing for this signal.

# QtDragon spindle speed display and spindle-at-speed LED require that spindle.0.speed-in be connected to spindle speed feedback. Encoder or VFD feedback could be used, as long as the feedback is in revolutions per second (RPS).If no feedback is available you can have the display show the requested speed by connecting pins like so:
net spindle-speed-feedback spindle.0.speed-out-rps => spindle.0.speed-in